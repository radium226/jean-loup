#!/usr/bin/env bash

set -euEo pipefail

SCRIPT_FOLDER_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
export SCRIPT_FOLDER_PATH


main()
{
    declare action
    action="${1}"
    shift 1


    case "${action}" in

        "build-packages" )
                build_packages "${@}"
            ;;

        "s" | "shell" )
                shell "${@}"
            ;;

        "u" | "upload" | "upload-file" )
                upload_file "${@}"
            ;;

        "d" | "download" | "download-file" )
                download_file "${@}"
            ;;

        "tp" | "take-picture" )
                take_picture "${@}"
            ;;

        "f" | "film" )
                film "${@}"
            ;;

    esac
}

shell()
{
    ssh -o "PreferredAuthentications=password" "alarm@192.168.0.48"
}

upload_file()
{
    declare file_path
    file_path="${1}"
    shift 1

    scp -o "PreferredAuthentications=password" "${file_path}" "alarm@192.168.0.48:"
}

download_file()
{
    declare file_path
    file_path="${1}"
    shift 1

    scp -o "PreferredAuthentications=password" "alarm@192.168.0.48:${file_path}" "."
}

take_picture()
{
    ssh -o "PreferredAuthentications=password" "alarm@192.168.0.48" "rpicam-still --immediate --autofocus-on-capture -e 'jpg' -o -" > "picture.jpg"
}

film()
{
    ssh -o "PreferredAuthentications=password" "alarm@192.168.0.48" "rpicam-vid --nopreview --width 200 --height 100 --timeout 0 --inline --output -" | ffplay -hide_banner -loglevel error -
}


build_packages()
{
    # To list the supported platform of a Docker image:
    # > docker run --rm "mplatform/mquery" "..."

    # This should be run first:
    # > docker run --privileged multiarch/qemu-user-static:latest --reset -p yes --credential yes
    # The credential option is to allow to run sudo inside Docker

    declare inside_docker=false
    while true; do
        case "${1-}" in
            --inside-docker )
                    shift 1
                    inside_docker=true
                ;;

            * )
                    break
                ;;
        esac
    done

    if ! ${inside_docker}; then
        docker run \
            --rm \
            --tty \
            --interactive \
            --platform="linux/arm/v7" \
            --mount type=bind,source="${SCRIPT_FOLDER_PATH}/jean-loup,target=/usr/local/bin/jean-loup" \
            --mount type=bind,source="${SCRIPT_FOLDER_PATH}/packages,target=/tmp/packages" \
            --env UID="$( id -u )" \
            --env GID="$( id -g )" \
            --entrypoint="jean-loup" \
            "lopsided/archlinux:devel" \
                "build-packages" --inside-docker
    else
        mkdir -p "/tmp/makepkg"
        groupadd -g "${GID}" -o "makepkg"
        useradd -m -u "${UID}" -g "${GID}" -o -s "/bin/bash" -d "/tmp/makepkg" "makepkg"
        chown -R "makepkg:makepkg" \
            "/tmp/makepkg" \
            "/tmp/packages"
        
        cat <<EOF > "/etc/sudoers.d/makepkg"
Defaults:makepkg !requiretty
Defaults:makepkg env_keep += "PATH"
makepkg ALL=(ALL) NOPASSWD:ALL
EOF
        chmod 600 "/etc/sudoers.d/makepkg"
        
        pacman -Sy --noconfirm

        # cd "/tmp/packages/libpisp-git"
        # sudo -u "makepkg" makepkg --syncdeps --noconfirm --install --cleanbuild

        # cd "/tmp/packages/libcamera-git"
        # sudo -u "makepkg" makepkg --syncdeps --noconfirm --install --cleanbuild
        
        # cd "/tmp/packages/rpicam-apps-git"
        # sudo -u "makepkg" makepkg --syncdeps --noconfirm --install --cleanbuild

        cd "/tmp/packages/pisugar-git"
        sudo -u "makepkg" makepkg --syncdeps --noconfirm --install --cleanbuild
    fi
}

main "${@}"